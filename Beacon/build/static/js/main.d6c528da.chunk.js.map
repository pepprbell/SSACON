{"version":3,"sources":["logo.svg","logo-cordova.png","pages/index.js","pages/notification.js","App.js","reportWebVitals.js","index.js"],"names":["Index","className","src","logoCordova","alt","logoReact","href","target","rel","React","Component","Notification","props","state","notificationTitle","notificationText","window","cordova","platformId","plugins","notification","local","schedule","title","this","text","browserNotifications","supported","show","this_","onKeyUp","e","setState","currentTarget","value","type","onClick","onRef","ref","body","icon","timeout","event","console","log","App","nowPage","goToPage","navigator","changePage","document","getElementsByClassName","navigatorHeight","innerHeight","height","myApp","onChangePage","page","levelPage","backgroundColor","style","footerMenuHeight","menuClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","addEventListener","ReactDOM","render","StrictMode","cordovaWork","getElementById"],"mappings":"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","file":"static/js/main.d6c528da.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/logo-cordova.61317aca.png\";","import React from 'react';\r\n\r\nimport logoReact from '../logo.svg';\r\nimport logoCordova from '../logo-cordova.png';\r\n\r\nexport default class Index extends React.Component {\r\n\r\n    render() {\r\n        return <div className=\"App\">\r\n            <header className=\"App-header\">\r\n            <img src={logoCordova} className=\"App-logo-cordova\" alt=\"logo react\" />\r\n                <img src={logoReact} className=\"App-logo\" alt=\"logo cordova\" />\r\n                <p>\r\n                    Edit <code>src/App.js</code> and save to reload.\r\n               </p>\r\n                <a\r\n                    className=\"App-link\"\r\n                    href=\"https://reactjs.org\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    Learn React\r\n             </a>\r\n            </header>\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport BrowserNotifications from 'react-browser-notifications';\r\n\r\nexport default class Notification extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            notificationTitle: \"\",\r\n            notificationText: \"\",\r\n        }\r\n\r\n    }\r\n\r\n    notification() {\r\n\r\n        const this_ = this;\r\n\r\n        //on mobile platform\r\n        if (window.cordova)\r\n            if (window.cordova.platformId !== \"browser\") {\r\n                //-- https://github.com/katzer/cordova-plugin-local-notifications.git  --//\r\n                window.cordova.plugins.notification.local.schedule({\r\n                    title: this_.state.notificationTitle,\r\n                    text: this_.state.notificationText,\r\n                });\r\n                return;\r\n            }\r\n\r\n        //om browser platform\r\n        if (this.browserNotifications.supported()) this.browserNotifications.show();\r\n\r\n    }\r\n\r\n    render() {\r\n        const this_ = this;\r\n        return <div className=\"notification_content\">\r\n            <h2>Title</h2>  <input onKeyUp={(e) => { this_.setState({ notificationTitle: e.currentTarget.value }); }} type=\"text\" />\r\n            <h2>Text</h2>  <input onKeyUp={(e) => { this_.setState({ notificationText: e.currentTarget.value }); }} type=\"text\" />\r\n            <br />\r\n            <br />\r\n            <button onClick={() => this.notification()}>Notification</button>\r\n\r\n<br/>\r\n<p>* It's will work only from <span>reco start</span> (local server on localhost), <span>mobile device</span> or <span>https url</span></p>\r\n\r\n            {/* https://www.npmjs.com/package/react-browser-notifications */}\r\n            <BrowserNotifications\r\n                onRef={ref => (this_.browserNotifications = ref)} // Required\r\n                title={this_.state.notificationTitle} // Required\r\n                body={this_.state.notificationText}\r\n                icon=\"./favicon.ico\"\r\n                timeout=\"3000\"\r\n                onClick={event => console.log(event)}\r\n            />\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport Navigator from 'react.cordova-navigation_controller';\r\n// Learn more about the Navigator: https://www.npmjs.com/package/react.cordova-navigation_controller\r\n\r\nimport './app.css';\r\n\r\n//--pages--//\r\nimport Home from './pages/index';\r\nimport Notification from './pages/notification';\r\n\r\nexport default class App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nowPage: \"\"\r\n    }\r\n  }\r\n\r\n  menuClick(e, goToPage) {\r\n\r\n    this.navigator.changePage(goToPage);\r\n    //this.navigator.ch\r\n\r\n    document.getElementsByClassName(\"active\")[0].className = \"\";\r\n    e.currentTarget.className = \"active\";\r\n  }\r\n\r\n  render() {\r\n    const footerMenuHeight = 50;//px \r\n    const navigatorHeight = window.innerHeight - footerMenuHeight;\r\n    return (\r\n      [\r\n        <Navigator\r\n        onRef={ref => (this.navigator = ref)} // Required\r\n          key=\"Navigator\"\r\n          height={navigatorHeight + \"px\"}\r\n          myApp={this}\r\n          // homePageKey={\"Home\"}\r\n         \r\n          onChangePage={(page) => {\r\n            this.setState({ nowPage: page });\r\n          }}\r\n        >\r\n\r\n          <Home key=\"Home\" levelPage={0}/>\r\n          <Notification key=\"Notification\" backgroundColor={\"#282c34\"} levelPage={1} />\r\n\r\n        </Navigator>,\r\n\r\n        <div key=\"footerMenu\" className=\"footerMenu\" style={{ height: footerMenuHeight + \"px\" }}>\r\n          <ul>\r\n            <li><div onClick={(e) => this.menuClick(e, \"Home\")} className={this.state.nowPage === \"Home\" ? \"active\" : \"\"} >Home</div></li>\r\n            <li><div onClick={(e) => this.menuClick(e, \"Notification\")} className={this.state.nowPage === \"Notification\" ? \"active\" : \"\"}>Notification</div></li>\r\n          </ul>\r\n        </div>\r\n      ]\r\n\r\n\r\n\r\n    );\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"cordova_script\";\r\n\r\ndocument.addEventListener(\r\n  \"deviceready\",\r\n  () => {\r\n    ReactDOM.render(\r\n      <React.StrictMode>\r\n        <div>\r\n          <App cordovaWork={true} />\r\n        </div>\r\n      </React.StrictMode>,\r\n      document.getElementById(\"root\")\r\n    );\r\n  },\r\n  false\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}